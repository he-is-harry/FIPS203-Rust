use crate::arithmetic::{mod_q_add, mod_q_mul, mod_q_sub};

const ZETA_BITREV7: [u16; 128] = [
    1, 1729, 2580, 3289, 2642,  630, 1897,  848, 1062, 1919,  193,  797, 2786, 3260,  569, 1746,
  296, 2447, 1339, 1476, 3046,   56, 2240, 1333, 1426, 2094,  535, 2882, 2393, 2879, 1974,  821,
  289,  331, 3253, 1756, 1197, 2304, 2277, 2055,  650, 1977, 2513,  632, 2865,   33, 1320, 1915,
 2319, 1435,  807,  452, 1438, 2868, 1534, 2402, 2647, 2617, 1481,  648, 2474, 3110, 1227,  910,
   17, 2761,  583, 2649, 1637,  723, 2288, 1100, 1409, 2662, 3281,  233,  756, 2156, 3015, 3050,
 1703, 1651, 2789, 1789, 1847,  952, 1461, 2687,  939, 2308, 2437, 2388,  733, 2337,  268,  641,
 1584, 2298, 2037, 3220,  375, 2549, 2090, 1645, 1063,  319, 2773,  757, 2099,  561, 2466, 2594,
 2804, 1092,  403, 1026, 1143, 2150, 2775,  886, 1722, 1212, 1874, 1029, 2110, 2935,  885, 2154,
];

pub(crate) fn ntt(f: &[u16; 256]) -> [u16; 256] {
    let mut f_ntt = *f;
    let mut k = 1;

    let mut len = 128;
    while len >= 2 {
        for start in (0..256).step_by(2 * len) {
            let zeta = ZETA_BITREV7[k];
            k += 1;
            for j in start..start + len {
                let t = mod_q_mul(zeta, f_ntt[j + len]);
                f_ntt[j + len] = mod_q_sub(f_ntt[j], t);
                f_ntt[j] = mod_q_add(f_ntt[j], t);
            }
        }
        len /= 2;
    }

    f_ntt
}

pub(crate) fn ntt_inv(f_ntt: &[u16; 256]) -> [u16; 256] {
    let mut f = *f_ntt;
    let mut k = 127;

    let mut len = 2;
    while len <= 128 {
        for start in (0..256).step_by(2 * len) {
            let zeta = ZETA_BITREV7[k];
            k -= 1;
            for j in start..start + len {
                let t = f[j];
                f[j] = mod_q_add(t, f[j + len]);
                f[j + len] = mod_q_mul(zeta, mod_q_sub(f[j + len], t));
            }
        }
        len *= 2;
    }
    
    // Multiply every entry by 3303 mod q
    for i in 0..256 {
        f[i] = mod_q_mul(f[i], 3303);
    }
    f
}

const ZETA_2BITREV71: [u16; 128] = [
    17, 3312, 2761,  568,  583, 2746, 2649,  680, 1637, 1692,  723, 2606, 2288, 1041, 1100, 2229, 
  1409, 1920, 2662,  667, 3281,   48,  233, 3096,  756, 2573, 2156, 1173, 3015,  314, 3050,  279, 
  1703, 1626, 1651, 1678, 2789,  540, 1789, 1540, 1847, 1482,  952, 2377, 1461, 1868, 2687,  642, 
   939, 2390, 2308, 1021, 2437,  892, 2388,  941,  733, 2596, 2337,  992,  268, 3061,  641, 2688, 
  1584, 1745, 2298, 1031, 2037, 1292, 3220,  109,  375, 2954, 2549,  780, 2090, 1239, 1645, 1684, 
  1063, 2266,  319, 3010, 2773,  556,  757, 2572, 2099, 1230,  561, 2768, 2466,  863, 2594,  735, 
  2804,  525, 1092, 2237,  403, 2926, 1026, 2303, 1143, 2186, 2150, 1179, 2775,  554,  886, 2443, 
  1722, 1607, 1212, 2117, 1874, 1455, 1029, 2300, 2110, 1219, 2935,  394,  885, 2444, 2154, 1175,
];

pub(crate) fn multiply_ntts(f_ntt: &[u16; 256], g_ntt: &[u16; 256]) -> [u16; 256] {
    let mut h_ntt = [0u16; 256];
    for i in 0..128 {
        let left = 2 * i;
        let right = 2 * i + 1;
        h_ntt[left] = mod_q_add(mod_q_mul(f_ntt[left], g_ntt[left]), mod_q_mul(f_ntt[right], mod_q_mul(g_ntt[right], ZETA_2BITREV71[i])));
        h_ntt[right] = mod_q_add(mod_q_mul(f_ntt[left], g_ntt[right]), mod_q_mul(f_ntt[right], g_ntt[left]));
    }
    h_ntt
}

// Arithmetic helper functions
// Mutates the polynomial a to be the sum of a and b
pub(crate) fn poly_add(a: &mut [u16; 256], b: &[u16; 256]) {
    for i in 0..256 {
        a[i] = mod_q_add(a[i], b[i]);
    }
}

// Computes the difference of the polynomial vectors a and b
pub(crate) fn poly_sub(a: &[u16; 256], b: &[u16; 256]) -> [u16; 256] {
    let mut result = [0u16; 256];
    for i in 0..256 {
        result[i] = mod_q_sub(a[i], b[i]);
    }
    result
}

// Computes the matrix vector multiplication of the matrix of polynomials a
// and vector of polynomials b
// Assumes the a matrix is a square matrix
pub(crate) fn poly_mat_mult(a: &[Vec<[u16; 256]>], b: &[[u16; 256]]) -> Vec<[u16; 256]> {
    let k = a.len();
    let mut result = vec![[0u16; 256]; k];
    for i in 0..k {
        for j in 0..k {
            poly_add(&mut result[i], &multiply_ntts(&a[i][j], &b[j]));
        }
    }
    result
}

// Computes the matrix vector multiplication of the transpose of the matrix
// of polynomials a and vector of polynomials
// Assumes the matrix is a square matrix
pub(crate) fn poly_mat_transpose_mult(a: &[Vec<[u16; 256]>], b: &[[u16; 256]]) -> Vec<[u16; 256]> {
    let k = a.len();
    let mut result = vec![[0u16; 256]; k];
    for i in 0..k {
        for j in 0..k {
            poly_add(&mut result[i], &multiply_ntts(&a[j][i], &b[j]));
        }
    }
    result
}

// Computes the sum of the polynomial vectors a and b
pub(crate) fn poly_vec_add(a: &[[u16; 256]], b: &[[u16; 256]]) -> Vec<[u16; 256]> {
    let k = a.len();
    let mut result = vec![[0u16; 256]; k];
    for i in 0..k {
        for j in 0..256 {
            result[i][j] = mod_q_add(a[i][j], b[i][j]);
        }
    }
    result
}

// Computes the inner product of the polynomial vectors a and b
pub(crate) fn poly_vec_mult(a: &[[u16; 256]], b: &[[u16; 256]]) -> [u16; 256] {
    let k = a.len();
    let mut result = [0u16; 256];
    for i in 0..k {
        poly_add(&mut result, &multiply_ntts(&a[i], &b[i]));
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_ntt() {
        let poly_rq = [41, 1811, 2079, 1175, 213, 1153, 2977, 2498, 2635, 3268, 2010, 636, 2433, 2108, 356, 2941, 1704, 2778, 1825, 1353, 2282, 3219, 1582, 3121, 1407, 535, 2061, 2905, 2298, 2877, 1390, 2036, 943, 1328, 3017, 1405, 2501, 347, 2691, 1793, 557, 1894, 1798, 364, 985, 1899, 1399, 1996, 3035, 2043, 1227, 453, 3238, 574, 1458, 763, 1671, 2922, 3102, 803, 1425, 1827, 2201, 1488, 2210, 2755, 2859, 2372, 2317, 883, 642, 879, 3032, 71, 2724, 2044, 979, 2577, 2587, 3016, 1919, 1441, 815, 2693, 471, 2116, 2743, 1130, 2428, 2736, 1001, 369, 913, 2051, 1170, 2929, 397, 1381, 710, 1270, 171, 683, 1885, 2520, 958, 1396, 2473, 1615, 2594, 129, 373, 2599, 2494, 569, 2625, 2474, 3227, 1806, 736, 1470, 3253, 1519, 3, 758, 2947, 3132, 2378, 2975, 1087, 1766, 133, 3051, 3240, 2675, 1086, 3243, 1145, 834, 169, 1455, 209, 2052, 195, 682, 1958, 191, 3153, 896, 3316, 1446, 2878, 434, 1389, 83, 1295, 3102, 1449, 2469, 461, 3296, 2667, 892, 3103, 1798, 2445, 530, 1262, 2844, 2289, 2950, 3073, 1000, 2257, 296, 3199, 1046, 116, 435, 849, 1025, 2030, 1957, 1302, 2048, 1475, 176, 949, 534, 2023, 2257, 2056, 1981, 855, 2144, 1146, 2102, 2863, 1641, 2890, 3125, 2078, 792, 998, 1472, 1488, 3215, 785, 490, 1507, 858, 474, 1284, 847, 3067, 2795, 2197, 3009, 804, 2224, 1959, 902, 92, 809, 2039, 2772, 328, 286, 1497, 764, 2618, 41, 67, 721, 3293, 2330, 441, 452, 2859, 2967, 1864, 547, 2992, 1298, 2236, 1421, 1116, 1409, 118, 447, 483, 3154, 2640, 1401, 1936, 3141, 2539];
        let expected = [914, 1835, 388, 2771, 848, 2105, 3094, 1846, 37, 1741, 2939, 710, 2747, 1435, 1160, 2322, 3129, 1023, 2335, 1389, 286, 3225, 316, 1595, 1142, 2448, 503, 50, 227, 2613, 1069, 702, 909, 75, 2940, 1121, 1698, 218, 803, 3018, 1358, 728, 2550, 2149, 752, 2940, 1860, 1635, 1803, 3131, 2501, 3030, 3055, 618, 1730, 631, 1127, 2708, 2310, 2732, 1971, 997, 1848, 1831, 2686, 2434, 2883, 1025, 1171, 1817, 162, 3136, 3275, 2555, 3322, 608, 2518, 846, 2914, 2847, 2369, 2323, 141, 597, 3280, 1877, 2467, 2697, 1002, 2445, 845, 2883, 2646, 1580, 2595, 1605, 884, 590, 1820, 653, 171, 1533, 3133, 1541, 1013, 2381, 1169, 2533, 3195, 998, 3002, 132, 3110, 1308, 1991, 1167, 412, 3261, 557, 614, 2685, 2204, 374, 759, 561, 49, 94, 2414, 2970, 3142, 3007, 1832, 1553, 1678, 1755, 442, 2686, 1961, 1011, 1435, 3299, 1852, 663, 634, 1644, 1800, 2112, 3176, 2876, 2733, 2658, 160, 2788, 2096, 2424, 2051, 401, 1164, 162, 405, 2484, 1367, 2940, 3230, 3117, 1421, 464, 2241, 2381, 2400, 1423, 3035, 731, 1637, 2874, 1883, 3175, 2445, 2102, 2144, 3306, 2587, 1964, 2648, 2643, 1189, 709, 3234, 995, 301, 2958, 1252, 967, 297, 2837, 3148, 1769, 2766, 342, 1748, 150, 2798, 170, 205, 2080, 1384, 1148, 511, 394, 75, 3270, 220, 1914, 90, 2709, 1717, 3266, 2779, 108, 409, 2671, 518, 2398, 924, 2243, 834, 1396, 1148, 1875, 253, 1134, 111, 678, 2046, 2865, 62, 1549, 2482, 1491, 2801, 2416, 1163, 2393, 528, 1729, 178, 1047, 331, 445, 1980, 2932, 2280, 1876, 2840, 958, 1520];
        let poly_tq = ntt(&poly_rq);
        assert_eq!(expected, poly_tq);
    }

    #[test]
    fn test_ntt_inv() {
        let poly_tq = [2731, 2290, 426, 2651, 2429, 1080, 201, 3299, 714, 2783, 2715, 2249, 998, 2033, 1107, 2341, 2798, 404, 1750, 3140, 3148, 194, 235, 2517, 1661, 3093, 3292, 2111, 839, 1626, 1345, 1021, 2877, 1049, 2040, 2803, 1012, 1178, 1415, 2149, 2988, 2651, 122, 1412, 2834, 1006, 290, 2310, 2961, 1478, 447, 48, 966, 2162, 1055, 2332, 1452, 261, 619, 2934, 1000, 2179, 3314, 2408, 560, 2733, 1640, 1688, 130, 2233, 930, 314, 1591, 2460, 2560, 567, 1411, 2768, 678, 2605, 3195, 1448, 1435, 3316, 957, 861, 2225, 3060, 270, 2855, 1370, 710, 1203, 1614, 446, 2161, 1427, 2994, 2549, 2053, 2183, 2584, 2685, 2917, 687, 1854, 2790, 2120, 1303, 2740, 1237, 680, 1653, 526, 100, 61, 146, 1160, 2376, 2219, 1681, 1419, 3155, 2567, 1838, 1235, 910, 2748, 3318, 1046, 927, 345, 2946, 2227, 2164, 388, 857, 140, 3215, 101, 1499, 2425, 1205, 844, 1465, 2302, 2086, 3158, 1571, 1821, 1636, 1195, 526, 1533, 84, 394, 1576, 31, 2369, 747, 2062, 347, 137, 345, 1003, 2318, 3327, 426, 1162, 1551, 415, 221, 1613, 1513, 1567, 1620, 2740, 2122, 737, 2043, 2084, 933, 3106, 632, 2525, 1725, 1544, 2152, 2265, 2418, 924, 485, 1013, 310, 1017, 2446, 2801, 1034, 2325, 2527, 1605, 2519, 817, 3134, 2030, 1083, 2606, 2782, 1179, 3000, 436, 2149, 1678, 517, 277, 2941, 1168, 154, 2293, 2404, 1971, 2010, 655, 859, 1782, 2556, 3273, 2810, 2944, 963, 602, 996, 2424, 3122, 1272, 1830, 2529, 2961, 3223, 2936, 1744, 1555, 1218, 2736, 330, 1801, 2458, 356, 2052, 739, 2086, 715, 179, 1564, 817, 439];
        let expected = [2420, 314, 309, 337, 2385, 3084, 3243, 483, 258, 1840, 2534, 2102, 1150, 2048, 861, 934, 2394, 2286, 251, 1109, 1759, 2180, 2700, 489, 3011, 395, 1263, 2802, 2307, 2018, 1814, 1639, 2943, 104, 2871, 954, 2314, 2086, 520, 1537, 1779, 917, 1708, 2246, 2443, 2912, 881, 1892, 2247, 2368, 2187, 791, 992, 1645, 1987, 1722, 1452, 5, 647, 2226, 2003, 1634, 2246, 2790, 2264, 2580, 1121, 2436, 1770, 1648, 1863, 2519, 1743, 189, 621, 1616, 1000, 2357, 1052, 3208, 1024, 770, 2293, 702, 2310, 1202, 2289, 800, 2431, 2266, 2405, 270, 2671, 1509, 656, 36, 2106, 1928, 2488, 600, 408, 803, 2424, 1549, 477, 1274, 1387, 22, 2758, 2009, 866, 652, 1636, 1241, 3209, 2506, 345, 2922, 2150, 875, 602, 693, 11, 2682, 2158, 1947, 2043, 663, 401, 2478, 1544, 525, 730, 1682, 1794, 2006, 1001, 338, 157, 1559, 1634, 2926, 1517, 131, 1709, 408, 3294, 542, 2473, 2202, 802, 2866, 373, 2551, 1736, 1198, 1288, 352, 738, 981, 2472, 354, 2862, 2464, 2832, 913, 845, 1207, 1573, 563, 998, 3164, 1520, 1537, 3272, 3000, 2114, 492, 2132, 960, 2651, 2061, 2605, 2222, 1819, 1484, 1546, 732, 3143, 2903, 187, 561, 2021, 1856, 870, 827, 2792, 1871, 993, 591, 304, 945, 2795, 214, 956, 812, 1731, 2469, 3205, 810, 2752, 1556, 2002, 944, 973, 1672, 2349, 2038, 1316, 455, 662, 336, 1637, 1291, 115, 974, 2701, 2199, 2696, 2977, 391, 2623, 2528, 1922, 60, 442, 2807, 3325, 704, 436, 2094, 2661, 3177, 2186, 2772, 2916, 1149, 3071, 3231, 576, 826, 2127, 650, 1993, 775, 95];
        let poly_rq = ntt_inv(&poly_tq);
        assert_eq!(expected, poly_rq);
    }

    #[test]
    fn test_identity() {
        let input = [330, 1506, 671, 416, 2809, 373, 2214, 90, 2342, 1612, 2744, 719, 670, 814, 2989, 3200, 3273, 3176, 931, 94, 2864, 1918, 1030, 1998, 1408, 2057, 1646, 2510, 3315, 223, 311, 1280, 2351, 1675, 151, 1435, 2768, 211, 1104, 2772, 2976, 2763, 2785, 1299, 1828, 2614, 1547, 1527, 1433, 567, 973, 1393, 2184, 1281, 1657, 3255, 806, 636, 1638, 166, 2469, 2837, 1983, 2385, 2316, 73, 12, 19, 92, 697, 3015, 653, 836, 147, 2108, 1964, 2808, 2371, 903, 379, 517, 1467, 2918, 268, 555, 2910, 1143, 3132, 1511, 458, 2079, 46, 2033, 3288, 90, 1244, 1790, 2601, 1103, 1048, 1251, 2207, 2698, 1048, 1229, 416, 1623, 93, 2502, 1648, 3061, 1596, 52, 2603, 2005, 351, 1756, 24, 2387, 1511, 1169, 2261, 1449, 2059, 2331, 2879, 988, 2000, 1790, 1896, 2380, 904, 1007, 2483, 1657, 2134, 1485, 1490, 1924, 1619, 1767, 1968, 3038, 841, 2626, 2912, 79, 1489, 1195, 1066, 316, 2415, 1578, 1408, 28, 264, 510, 652, 709, 2460, 263, 2888, 612, 956, 1937, 1056, 587, 2708, 2270, 2021, 308, 1953, 2511, 821, 600, 32, 1812, 952, 1763, 548, 1832, 2588, 1797, 386, 2331, 2086, 863, 78, 2506, 2410, 2289, 1391, 432, 146, 3130, 230, 2825, 3057, 2628, 1882, 1622, 3113, 1896, 1748, 2312, 2200, 1059, 2998, 2862, 1181, 1362, 896, 2776, 1702, 2732, 1740, 3026, 937, 3154, 1600, 3147, 412, 383, 3220, 2793, 452, 219, 1564, 1644, 1067, 1137, 1455, 1461, 1958, 2504, 2236, 360, 1407, 1359, 73, 1238, 2121, 2483, 3168, 975, 2176, 1482, 285, 3262, 696, 777, 808, 135, 2701, 2276, 2245];
        let poly_tq = ntt(&input);
        let poly_rq = ntt_inv(&poly_tq);
        assert_eq!(input, poly_rq);
    }

    #[test]
    fn test_multiply_ntts() {
        let f_tq = [1407, 625, 1057, 3079, 3000, 1916, 2531, 1377, 2612, 2241, 2997, 779, 844, 278, 529, 2997, 2796, 2233, 2421, 1258, 2805, 0, 2350, 2453, 1146, 577, 1737, 192, 432, 3244, 712, 1286, 549, 563, 1006, 2502, 2390, 1091, 1117, 2789, 535, 2432, 966, 1138, 2761, 246, 1956, 899, 1854, 2350, 3103, 2538, 1012, 426, 1672, 1544, 2055, 1064, 3110, 293, 1194, 2824, 1146, 116, 1927, 1903, 404, 2042, 2710, 1718, 1991, 1445, 152, 1079, 2525, 1447, 2352, 704, 647, 153, 1699, 1622, 523, 786, 1242, 2911, 331, 756, 708, 2203, 2454, 1587, 710, 289, 2135, 114, 3322, 2599, 1775, 3236, 11, 833, 1726, 971, 1072, 418, 3190, 398, 1099, 806, 3328, 1431, 1189, 58, 1075, 113, 1349, 2843, 1212, 1822, 52, 1631, 109, 1304, 2306, 1347, 418, 1100, 1154, 1080, 2661, 455, 1472, 1097, 445, 2628, 3061, 274, 2822, 1681, 1214, 3288, 1707, 40, 762, 149, 322, 2666, 1129, 819, 0, 137, 1017, 2903, 2814, 696, 1427, 950, 3157, 2724, 383, 1906, 1338, 1732, 1457, 2910, 84, 1332, 210, 487, 898, 1725, 2589, 2582, 2958, 2885, 1511, 2368, 1773, 1233, 1605, 1885, 3106, 2506, 1015, 1069, 933, 775, 1237, 183, 1294, 1983, 1806, 924, 771, 1815, 688, 1104, 593, 10, 1628, 3163, 300, 787, 1544, 1900, 2248, 20, 71, 2153, 1147, 738, 2322, 424, 1765, 432, 1459, 673, 2661, 2077, 3327, 3062, 3130, 543, 521, 1631, 251, 1725, 279, 410, 2845, 402, 364, 2653, 2706, 1919, 362, 607, 708, 3091, 2369, 409, 312, 738, 383, 3074, 1558, 1774, 1384, 3157, 1652, 2951, 1588, 742, 363, 1241];
        let g_tq = [79, 1194, 2808, 2128, 1142, 2965, 641, 264, 981, 2119, 1382, 3246, 1593, 2731, 1776, 3185, 2849, 396, 2478, 1609, 1117, 2043, 23, 1249, 359, 1815, 1424, 1296, 192, 2539, 1504, 1165, 130, 333, 496, 1146, 1338, 2201, 1323, 2510, 838, 81, 1816, 2998, 1000, 2059, 800, 1703, 2231, 1458, 1367, 1936, 1062, 688, 2162, 471, 1176, 611, 1298, 64, 3107, 1141, 1051, 1587, 304, 1137, 434, 179, 1317, 1049, 2297, 2050, 2515, 2865, 2046, 2876, 3023, 157, 2575, 1046, 2125, 1238, 1280, 1111, 988, 280, 1885, 2158, 146, 3190, 2767, 1597, 1385, 1622, 315, 25, 2454, 1394, 1162, 3187, 3252, 389, 449, 198, 1057, 726, 1658, 103, 2040, 2789, 1136, 113, 1342, 166, 2467, 1657, 2619, 74, 699, 650, 2403, 1573, 2711, 2757, 1099, 781, 126, 1058, 2301, 691, 3158, 58, 1547, 601, 2190, 1819, 1212, 1312, 2541, 600, 3098, 1830, 3297, 3199, 2447, 876, 2207, 1748, 178, 2158, 2486, 114, 1820, 642, 663, 3261, 926, 2590, 1603, 805, 2084, 2814, 1441, 629, 2073, 1729, 2557, 1301, 564, 431, 2123, 2530, 2771, 1615, 464, 2505, 3215, 1267, 1554, 1793, 2049, 1833, 1747, 1345, 1041, 3047, 1071, 1425, 1673, 2451, 1458, 1459, 1754, 38, 2460, 1171, 2171, 3254, 1730, 1251, 715, 1435, 267, 167, 2198, 1951, 937, 982, 2941, 119, 1270, 1635, 3207, 143, 2021, 113, 2280, 1146, 1002, 2080, 645, 1259, 1747, 1318, 2903, 1994, 308, 2743, 3063, 343, 1472, 3159, 512, 2908, 904, 93, 1171, 809, 455, 545, 568, 1183, 1351, 2184, 944, 2850, 18, 1835, 2578, 3, 2334, 727, 2863, 2521, 2807, 1791];
        let expected = [727, 1582, 1024, 2640, 2936, 831, 498, 2856, 2603, 3311, 1342, 2235, 2643, 1393, 2481, 3321, 482, 2086, 2855, 1839, 596, 1406, 2142, 2127, 399, 110, 1334, 1178, 867, 1932, 1373, 554, 3222, 3003, 3005, 317, 2679, 2226, 1116, 1967, 988, 726, 2457, 2466, 2642, 1950, 193, 2204, 2872, 2988, 1239, 2520, 3070, 163, 375, 1009, 1450, 132, 1159, 108, 1708, 3046, 1204, 3140, 2875, 3112, 1468, 3121, 2586, 2039, 1708, 348, 2266, 3260, 314, 2432, 1331, 706, 859, 2128, 2002, 669, 2133, 2529, 1574, 1356, 1208, 2140, 1442, 183, 418, 1083, 259, 571, 2146, 2731, 460, 3140, 1990, 2745, 54, 60, 250, 2070, 2094, 1684, 151, 3070, 2171, 2145, 2784, 951, 891, 2232, 2500, 2724, 357, 2129, 3148, 727, 1007, 2960, 739, 649, 1856, 2274, 2543, 1598, 1735, 100, 1535, 3295, 135, 1756, 196, 3316, 1681, 446, 818, 2382, 1448, 661, 1099, 3182, 587, 125, 456, 1774, 3181, 2189, 1229, 1024, 1023, 767, 2385, 447, 916, 1584, 2905, 282, 815, 3102, 1162, 1756, 269, 2711, 177, 3113, 617, 2317, 521, 1837, 2767, 712, 798, 3147, 2318, 3288, 985, 1701, 2755, 3183, 2116, 22, 1555, 1007, 113, 2358, 1307, 2388, 284, 2045, 718, 1521, 1535, 1393, 296, 1568, 1854, 131, 1942, 376, 2036, 567, 1560, 1233, 2245, 2504, 1542, 2006, 1895, 2929, 1499, 682, 689, 579, 1067, 627, 528, 2611, 2795, 1704, 2674, 565, 156, 1181, 276, 1379, 1113, 3282, 2518, 1566, 416, 3323, 236, 2350, 2694, 1626, 1220, 1263, 100, 2120, 706, 630, 914, 1935, 1868, 1290, 2006, 164, 672, 2497, 811, 2334, 1179, 2331];
        let mult_tq = multiply_ntts(&f_tq, &g_tq);
        assert_eq!(mult_tq, expected);
    }
}