use crate::Q;
use sha3::{Shake128, digest::{ExtendableOutput, Update, XofReader}};

// j and i are the extended bytes of the seed
pub(crate) fn sample_ntt(seed: &[u8], j: u8, i: u8) -> [u16; 256] {
    debug_assert!(seed.len() == 32, "Seed must be 32 bytes");

    let mut hasher = Shake128::default();  // ctx ← XOF.Init()
    hasher.update(seed);                                        // ctx ← XOF.Absorb(ctx, B)
    hasher.update(&[j]);
    hasher.update(&[i]);
    let mut reader = hasher.finalize_xof();

    let mut output = [0u16; 256];
    let mut j = 0;

    while j < 256 {
        let mut buf = [0u8; 3];
        reader.read(&mut buf);    // (ctx, C) ← XOF.Squeeze(ctx, 3)

        let d1 = buf[0] as u16 + 256 * (buf[1] as u16 & 0x0F); // d1 ← C[0] + 256 * (C[1] mod 16)
        let d2 = (buf[1] as u16 >> 4) + 16 * buf[2] as u16;    // d2 ← floor(C[1] / 16) + 16 * C[2]

        if d1 < Q {
            output[j] = d1;    // a[j] ← d1
            j += 1;
        }

        if d2 < Q && j < 256 {
            output[j] = d2;    // a[j] ← d2
            j += 1;
        }
    }

    output
}

// Remainders are precomputed outside of the sample_poly_cbd function
const ETA_SUB_MODS: [[u16; 4]; 4] = [
    [    0, Q - 1, Q - 2, Q - 3],
    [    1,     0, Q - 1, Q - 2],
    [    2,     1,     0, Q - 1],
    [    3,     2,     1,     0],
];

pub(crate) fn sample_poly_cbd(seed: &[u8]) -> [u16; 256] {
    let eta = seed.len() / 64;
    debug_assert!((eta == 2 || eta == 3), "eta must be 2 or 3");
    debug_assert_eq!(seed.len(), 64 * eta, "Seed must be 64 * eta bytes");

    let mut poly = [0u16; 256];
    let mut byte_index = 0;
    let mut work_chunk: u32 = 0;
    let mut bits_loaded = 0;

    for i in 0..256 {
        // Check if there are enough bits for the eta
        if bits_loaded < 2 * eta {
            work_chunk |= (seed[byte_index] as u32) << bits_loaded;
            byte_index += 1;
            bits_loaded += 8;
        }

        let x = (work_chunk & ((1 << eta) - 1)).count_ones() as usize;
        work_chunk >>= eta;
        let y = (work_chunk & ((1 << eta) - 1)).count_ones() as usize;
        work_chunk >>= eta;
        bits_loaded -= 2 * eta;
        // Store (x - y) mod q
        poly[i] = ETA_SUB_MODS[x][y];
    }

    poly
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sample_ntt() {
        let seed = [27, 122, 220, 177, 51, 119, 23, 138, 66, 214, 53, 30, 89, 111, 173, 72, 101, 174, 99, 77, 25, 239, 39, 133, 176, 151, 202, 138, 4, 155, 81, 252];
        let j = 30;
        let i = 92;
        let expected = [2063, 569, 3074, 2591, 2041, 3243, 2426, 2623, 2031, 51, 569, 561, 1456, 2810, 1391, 986, 3078, 2152, 1526, 2133, 1933, 2683, 493, 2766, 2514, 1546, 2253, 1104, 2892, 673, 332, 3291, 1708, 1562, 1726, 1493, 2921, 1300, 2505, 1349, 155, 2837, 334, 645, 1457, 1860, 1494, 1831, 2741, 882, 2134, 1109, 743, 1585, 116, 3140, 3131, 2677, 641, 1869, 1180, 3190, 1110, 565, 2320, 3100, 76, 3015, 1777, 1057, 2320, 408, 1246, 1760, 2150, 2999, 2322, 2810, 926, 2715, 3270, 1507, 50, 769, 3292, 2791, 26, 1783, 1236, 1915, 1920, 812, 3107, 28, 138, 1320, 2709, 1074, 2294, 3028, 2388, 1749, 1007, 690, 1260, 2925, 702, 497, 691, 1260, 1525, 2723, 1273, 2814, 2854, 100, 3182, 2795, 351, 1862, 831, 3289, 2006, 2226, 1023, 35, 1021, 2484, 1722, 2283, 2545, 759, 1892, 702, 557, 404, 773, 1873, 1948, 3267, 1675, 1610, 1082, 828, 576, 1691, 3298, 1401, 1885, 101, 2231, 2076, 2925, 268, 1619, 2682, 552, 3325, 1362, 2147, 3093, 2012, 2748, 106, 1514, 1451, 457, 117, 1329, 1156, 849, 1589, 1800, 1921, 2539, 2010, 1374, 1528, 2366, 796, 768, 1558, 2184, 1646, 3126, 2825, 754, 1549, 1001, 840, 975, 2397, 1260, 1798, 2641, 1536, 1100, 2490, 292, 859, 2195, 692, 1346, 2884, 1637, 3109, 2443, 2436, 2957, 3052, 884, 2610, 948, 1507, 2903, 3092, 1988, 2699, 1339, 2088, 456, 1946, 720, 910, 43, 624, 2800, 1042, 1495, 2970, 1716, 1644, 1718, 3061, 2888, 2508, 1262, 1999, 3214, 2037, 3006, 2082, 1060, 1620, 1982, 1336, 804, 2850, 2222, 2199, 592, 2007, 2937, 553, 2208, 1642];
        let poly = sample_ntt(&seed, j, i);
        assert_eq!(expected, poly);
    }

    #[test]
    fn test_sample_poly_cbd() {
        let seed = [20, 219, 21, 225, 180, 60, 28, 210, 218, 147, 188, 76, 197, 139, 52, 82, 16, 43, 99, 22, 108, 106, 188, 155, 104, 17, 209, 184, 204, 34, 60, 162, 137, 87, 163, 35, 152, 70, 246, 66, 108, 209, 142, 162, 32, 8, 158, 181, 222, 148, 79, 123, 119, 81, 216, 204, 72, 211, 109, 148, 87, 174, 83, 21, 142, 77, 164, 135, 199, 181, 251, 238, 129, 161, 202, 154, 216, 162, 8, 55, 106, 82, 42, 242, 92, 193, 253, 37, 31, 12, 204, 23, 154, 237, 86, 55, 220, 44, 4, 133, 22, 222, 173, 12, 65, 10, 230, 28, 44, 93, 237, 149, 78, 137, 45, 5, 127, 115, 96, 47, 153, 208, 137, 248, 106, 236, 222, 18, 198, 102, 136, 152, 155, 33, 55, 228, 90, 159, 49, 223, 101, 202, 228, 168, 19, 211, 191, 247, 152, 19, 58, 63, 96, 221, 30, 121, 52, 39, 123, 103, 32, 168, 73, 143, 70, 126, 229, 66, 25, 254, 83, 77, 14, 82, 65, 106, 240, 10, 243, 67, 121, 219, 216, 12, 184, 68, 248, 196, 241, 8, 80, 32];
        let expected = [0, 3328, 0, 2, 0, 1, 1, 2, 3328, 3328, 0, 0, 1, 3328, 1, 1, 2, 1, 3328, 1, 0, 1, 3328, 0, 1, 3328, 1, 0, 3328, 3328, 3328, 1, 3327, 2, 0, 3328, 3326, 3328, 3328, 3328, 3327, 3328, 3328, 0, 2, 1, 3327, 3328, 3327, 3328, 0, 3328, 1, 3328, 1, 3328, 1, 0, 0, 3328, 3328, 3326, 3328, 0, 0, 1, 3327, 1, 3328, 0, 2, 0, 3327, 0, 0, 0, 1, 1, 2, 1, 2, 3327, 3327, 0, 1, 3326, 3327, 1, 0, 0, 3326, 3328, 0, 0, 1, 3328, 1, 2, 3328, 3328, 3328, 0, 0, 3327, 3328, 3328, 1, 3328, 0, 3328, 0, 3327, 3328, 2, 3328, 0, 1, 3327, 1, 2, 0, 1, 0, 1, 0, 0, 0, 1, 3328, 0, 1, 1, 2, 3328, 0, 1, 0, 3328, 3328, 3328, 0, 3327, 1, 3, 3328, 3328, 1, 3328, 1, 3327, 0, 0, 0, 0, 3327, 1, 0, 1, 0, 1, 3328, 1, 0, 0, 3326, 0, 2, 3328, 0, 1, 0, 3328, 1, 0, 3328, 1, 0, 2, 3328, 1, 0, 0, 0, 2, 3328, 3327, 0, 3328, 0, 1, 1, 3328, 1, 0, 3328, 1, 1, 1, 3327, 1, 3327, 3327, 2, 3327, 0, 3328, 0, 0, 3328, 3328, 3328, 0, 2, 1, 1, 3328, 0, 3328, 3327, 0, 3328, 1, 0, 3328, 3328, 3326, 0, 0, 1, 3327, 3328, 0, 1, 3328, 2, 3327, 0, 0, 0, 3328, 3327, 0, 1, 0, 0, 3328, 1, 0, 3326, 1, 3328, 3327, 3328, 0, 2, 3328];
        let poly = sample_poly_cbd(&seed);
        assert_eq!(expected, poly);
    }
}
